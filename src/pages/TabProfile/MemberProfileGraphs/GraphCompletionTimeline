import React from 'react';
import { orderBy } from 'lodash';
import moment from 'moment';
import { Tier, Game, Member } from '@masochistme/sdk/dist/v1/types';

import { useCuratedGames, useTiers, useMemberById, useMemberGames } from 'sdk';
import { Section, DoughnutChart, LineChart } from 'containers';
import { log } from 'utils';
import { Flex, Spinner } from 'components';

type Props = {
	memberId: string;
};

export const GraphCompletionTimeline = (props: Props) => {
	const { memberId } = props;

	const { tiersData: tiers } = useTiers();
	const { gamesData: games } = useCuratedGames();
	const { memberData: member, isLoading, isFetched } = useMemberById(memberId);
	const {
		memberGamesData,
		isLoading: isMemberGamesLoading,
		isFetched: isMemberGamesFetched,
	} = useMemberGames(memberId);

	return (
		<LineChart
			datasetIdKey={`member-${memberId}-completiontimeline`}
			data={{
				labels: getTimelines('label', tiers, member, games),
				datasets: [
					{
						label: 'games',
						data: getTimelines('games', tiers, member, games),
					},
					{
						label: 'points',
						data: getTimelines('points', tiers, member, games),
					},
				],
			}}
		/>
	);
};

/**
 *
 */
const getTimelines = (
	type: string,
	tiers: Tier[],
	_member: Member,
	games: Game[],
) => {
	let data = [];
	let gamesTotal = 0;
	let pointsTotal = 0;
	let startDate = 0;
	let endDate = 0;

	// let timelines = member?.games.filter((game: any) => game.percentage === 100);
	let timelines: any[] = []; // TODO Replace with real timelines data
	timelines = orderBy(timelines, ['lastUnlocked'], ['asc']);

	// @ts-ignore
	startDate = moment(new Date(timelines[0]?.lastUnlocked * 1000));
	// @ts-ignore
	endDate = moment(
		new Date(timelines[timelines.length - 1]?.lastUnlocked * 1000),
	);

	// @ts-ignore
	while (startDate.isBefore(endDate)) {
			// @ts-ignore
		data.push({
			// @ts-ignore
			label: startDate.format('yyyy-MM'),
			games: 0,
			points: 0,
		});
		// @ts-ignore: any
		startDate.add(1, 'month');
	}
	// @ts-ignore
	data = data.map((date: any) => {
		const gamesCompletedInMonth = timelines
			.filter((game: any) => {
				const month = new Date(game.lastUnlocked * 1000).getMonth() + 1;
				const year = new Date(game.lastUnlocked * 1000).getFullYear();
				return (
					date.label === `${year}-${month < 10 ? `0${month}` : month}` &&
					games.find((g: Game) => g.id === game.id)
				);
			})
			.map((game: any) => {
				try {
					date.points +=
						tiers.find(
							(tier: Tier) =>
								tier.id === games.find((g: Game) => g.id === game.id)?.tier,
						)?.score ?? 0;
				} catch (err: any) {
					log.WARN(err);
					date.points = 0;
				}
				return game;
			});
		if (gamesCompletedInMonth.length !== 0) {
			gamesTotal = gamesTotal + gamesCompletedInMonth.length;
			pointsTotal = pointsTotal + date.points;
		}
		date.games = gamesTotal;
		date.points = pointsTotal;
		return date;
	});

	return data.map((d: any) => d[type]);
};
